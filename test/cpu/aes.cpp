// g++ -I include test/cpu/aes.cpp -o cpu_aes.exe -std=c++17 -maes
#include "../../src/cpu/aes.hpp"

#include <cstdio>
#include <cstring>

static std::uint8_t user_key[32] = {
    0x04, 0xb5, 0xf0, 0x47, 0x03, 0xe2, 0x02, 0x5f, 0x5d, 0x08, 0x46,
    0xc8, 0x0a, 0x68, 0x19, 0xa0, 0x04, 0xb5, 0xf0, 0x47, 0x03, 0xe2,
    0x02, 0x5f, 0x5d, 0x08, 0x46, 0xc8, 0x0a, 0x68, 0x19, 0xa0,
};

static std::uint8_t pt[] = {
    0x13, 0xf1, 0xdb, 0xd4, 0x4e, 0x92, 0x3a, 0x83, 0xd0, 0x23, 0x29, 0x7d,
    0xb0, 0x72, 0x59, 0x22, 0x12, 0x9f, 0x6f, 0xff, 0xc1, 0x85, 0x11, 0xde,
    0x69, 0xcf, 0xca, 0x6f, 0x9a, 0xf5, 0xdc, 0x42, 0xcf, 0x85, 0x56, 0x0a,
    0x54, 0x42, 0xdd, 0x96, 0x36, 0x6b, 0x80, 0x22, 0x6d, 0x23, 0x19, 0x36,
    0xa4, 0x88, 0x3d, 0xc9, 0x7a, 0x46, 0x88, 0x4d, 0x6f, 0x2a, 0xd6, 0x83,
    0xc9, 0xbd, 0xa5, 0x29, 0x02, 0x20, 0xaa, 0xb3, 0x8c, 0xaa, 0xa2, 0x71,
    0x45, 0x0b, 0x23, 0x1b, 0x6b, 0x26, 0x7d, 0x8a, 0x37, 0x7d, 0x77, 0xb0,
    0xfd, 0xbb, 0x90, 0xaf, 0x98, 0xc5, 0xda, 0xdd, 0x18, 0x63, 0x0d, 0x02,
    0xe8, 0x7a, 0x07, 0x58, 0xe4, 0xda, 0x47, 0x7c, 0x24, 0xe2, 0x9a, 0x99,
    0xfd, 0xd8, 0x20, 0x4e, 0x8a, 0x77, 0xeb, 0x77, 0xbf, 0x47, 0x0b, 0x23,
    0xaf, 0xd1, 0x20, 0x4c, 0xc8, 0xfa, 0x8b, 0x71,
};

static std::uint8_t ct128[] = {
    0x05, 0x82, 0x59, 0x7a, 0xc7, 0x32, 0xc6, 0xaf, 0x3a, 0x0f, 0xee, 0xe1,
    0x8d, 0xd1, 0x32, 0xa5, 0x6f, 0x86, 0x9e, 0x2b, 0x33, 0xa4, 0xe7, 0x88,
    0xc7, 0xbc, 0x40, 0xd4, 0xd7, 0x71, 0x78, 0x18, 0x60, 0x46, 0x5e, 0x44,
    0x70, 0x86, 0x1e, 0x08, 0x1b, 0xc6, 0xa6, 0x09, 0x25, 0xe9, 0x7c, 0xf3,
    0xc4, 0x7a, 0x21, 0x79, 0xf4, 0x71, 0x3c, 0xb9, 0xc5, 0x3a, 0xed, 0xf4,
    0x35, 0x9f, 0x4c, 0x09, 0xc1, 0x45, 0xaa, 0x6d, 0xc0, 0x94, 0x6f, 0xf2,
    0xee, 0x29, 0xa6, 0xb5, 0xd6, 0xab, 0x6d, 0xf7, 0x46, 0x6c, 0xb9, 0x8d,
    0x13, 0x1b, 0xeb, 0x81, 0xdd, 0x76, 0xd3, 0x2d, 0xab, 0x39, 0xc4, 0x32,
    0x71, 0xb8, 0x68, 0xc3, 0x4e, 0x5f, 0x14, 0x3b, 0xad, 0xbe, 0x36, 0x8b,
    0x0a, 0x11, 0x7d, 0x05, 0x85, 0xe7, 0x6c, 0x00, 0x83, 0xf4, 0x09, 0x90,
    0x35, 0xf5, 0xf4, 0xce, 0x98, 0xe8, 0x5d, 0x79,
};

int main()
{
    FastFss::cpu::AES128 aes128ctx;

    std::uint8_t output_buffer[sizeof(pt)];
    aes128ctx.set_enc_key(user_key);
    aes128ctx.enc_blocks(output_buffer, pt, sizeof(pt) / 16);
    if (std::memcmp(output_buffer, ct128, sizeof(ct128)) == 0)
    {
        std::printf("[%d] aes128 test ok\n", __LINE__);
    }
    else
    {
        std::printf("[%d] aes128 test fail\n", __LINE__);
    }

    return 0;
}